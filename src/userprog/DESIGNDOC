			+--------------------------+
			|          CS 130          |
			| PROJECT 2: USER PROGRAMS |
			|     DESIGN DOCUMENT      |
			+--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Qiuming Sun     <sunqm@shanghaitech.edu.cn>
Yifeng  Zhang   <zhangyf@shanghaitech.edu.cn>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


  1. https://github.com/pindexis/pintos-project2
  2. https://wenku.baidu.com/view/8296f9629b6648d7c1c74649.html
  3. http://bits.usc.edu/cs350/assignments/project2.pdf
  4. https://wenku.baidu.com/view/8e0d72e0a8956bec0875e392.html
  5. https://wenku.baidu.com/view/eed6bbdaa48da0116c175f0e7cd184254b351ba8.html

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  No new global variables or types were declared for argument
  passing.

  However, the following function declaration were changed:

  static bool setup_stack (void **esp, char **argv, int argc);

  The functions were redefined because in start_process, load function is invoked,
  where setup_stack is a step to set up the user stack. "argv" in the parameter
  is a pointer of pointer to the real argv and so does argc.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

  Argument parsing is implemented in the setup_stack function. First, the argv
  and argc are preprocessed by function extract_command_args and are stored in
  the relevant variables, which will be passed to setup_stack(void **esp, char **argv, int argc).

  The pointer *esp is kept to each argument's stack position and the pointer
  itself is stored in the arr[argc].

  After saving each character string's stack position, the word size on the
  stack is aligned. Then the array of pointers is pushed onto the stack in reverse
  order. Finally, the argv, argc and fake return address are pushed onto
  the stack.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

  In strtok(), the following is true (taken from C documentation):

  The point where the last token was found is kept internally by the
  function to be used on the next call .

  This means that if two threads are calling strtok() in the kernel, there
  is a possible data race where one thread would use the last token held by
  another thread, which would obviously be incorrect and even worse, could
  crash the kernel.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

  1. This makes the shell allocate memory for argument parsing, instead of
  the kernel. The memory of kernel is small and precious. If the user process
  runs out of memory, it would not cause a serious problem, but if the kernel
  runs out of memory, that might crash the entire system.

  2. This allows the shell to check if the command line is blank or the user
  enters invalid characters before passing control to the kernel.



			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  struct thread
  {
    char *prog_name;                       /* The name of the running program for this thread */
    tid_t parent_tid;                      /* The tid of the parent thread */
    struct list desc_table;                /* List of the fds of files opened by this thread */
    int next_fd;                           /* File descriptor for the next file to be opened */
    struct file *executable;               /* File struct referring the the executable */
  };

  static struct list process_history_list; /* List that keeps track of all died process */

  struct process_exit_status               /* Stores the exit status of each process */
  {
    struct list_elem elem;                 /* List element */
    int status;                            /* The returned status */
    pid_t pid;                             /* Process id */
    pid_t parent_pid;                      /* Parent process id */
  };

  static struct list process_waiting_list; /* List that keeps track of all the waiting process */

  struct process_waiting                   /* Waiting process entry */
  {
    struct list_elem elem;                 /* List element */
    struct semaphore sem;                  /* The semaphore */
    pid_t waiting_for;                     /* The id for the process waiting for */
  };

  struct fd_entry                          /* File descriptor entry */
  {
    struct list_elem elem;                 /* List element */
    int fd;                                /* File decriptor number */
    struct file *file;                     /* File struct reffering the file */
  };


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

  Each file descriptor is an integer, indicating a single file opened by the current
  thread. The file  descriptor starts with 2 (i.e., the first file opened by the
  thread will have file descriptor = 2), because 0 and 1 are reserved for STDIN_FILENO
  and STDOUT_FILENO. Upon openning a new file, allocate a new file descriptor to
  this file, basing on the previous one stored in the thread struct. This file
  descriptor is then used to create a new struct fd_entry, and this fd_entry will
  be added to desc_table.

  With in a single process, file descriptors are unique, thus can be used to
  identify different opened files. Even if the file names are the same, this
  design will dinstinguish between them correctly.




---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

  First in syscall handler, we check the validity of the stack pointer.
  Validity of a pointer is checked by testing if the pointer is
  above the end of user's code address and if it is less than the kernel's
  virtual address space. If the stack pointer is valid, then the stack
  pointer is dereferenced, let us get the syscall number.

  Then retrieve each arguments and check the incremented stack pointer.
  For pointer arguments, those arguments must be checked for validity,
  then dereferenced to a kernel virtual address. For strings and buffer
  arguments, each byte must be checked for validity.

  Finally, we can invoke syscall by the syscall number we retrieved before,
  where the user data can be returned through the interrupt frame's register eax.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

  Full page scenario:
    The least possible number of inspections will be 1. Suppose the data starts
    at the beginning of the page and all the data happens to locate within the
    same page, only one page needs to be verified.

    The greatest possible number would be 4096. The worst case is the data is
    split byte by byte into discontinuous virtual address. Then 4096 pages will
    be acquired and comes with 4096 inspections.

  2 Bytes of data scenario
    Just like the full page scenario, if the 2-byte data is lie within the same
    page, then only 1 inspection is needed. However, in the worst case page
    inspection only needs to occur twice, once for each byte.

  Improvement:
    The number of inspection can be decreased by making full use of each page.
    We can try to pack the data into the same page when loading the data. Then
    page inspections are only acquired when data is occurred on the different page,
    which definitely reduce the inspections.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

  The process, given a child tid, check whether the tid is the child thread
  of the calling process and whether tid is valid. If it doesn't exist,
  return -1. If the current process is already waiting on the child (i.e.
  process_wait() has already been successfully called for the given TID),
  -1 is also returned. Otherwise, the child process' wait is set to true
  and the current process waits until the child process exits. Then the
  current process gets the child's exit status, removes the child from
  the history list (since the child thread is already dead, this removes
  all traces of the child) and returns the status.



>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

  To handle errors with pointers, there is a function called is_valid_pointer,
  which actually is a preparation to check whether the pointer is valid on the
  user-specified address. If the pointer is not valid, then return false and
  the system call will not go on.

  In each call to thread_exit, which is called if a process is killed by the
  kernel or by exit, it calls process_exit if the thread is a user
  program. In process exit, the file and child lists are freed. The
  executable is closed, so it can be written to once again and the signal
  the parent process.

  Lets say a user process calls write with a buffer size of 20, where the
  pointer to the tenth byte is invalid. First, the call number is read from
  the user stack along with the three arguments. Then for each pointer in
  the range of the buffer size, we will invoke is_valid_pointer to check the
  validity of pointers. At the tenth byte, this validity will fail and exit(-1)
  will be called. At this point, we'll send the exit status to the parent and
  then call thread_exit. The resources will be freed and the thread will be dead,
  allowing another thread to be scheduled.


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

  This is done by using the process_exit and process_waiting entries. Parents wait
  for the child process to complete loading by trying to take down the semaphore
  in the process_waiting entry, and when the child finishes loading, it rises up
  the semaphore, signaling that the loading has finished to the parent process, and
  add its exit status entry to process_exit list. Then the parent process search
  for the status in process_exit list, and finally gets the status.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

  We maintain a list with all the waiting processes and all the processes that have
  exited. If P waits for C, the wait() function first search for the process C in
  the list containing all threads. If the correct C is found and it is a child
  of P, go on to the next step, else return -1. In the next step, P creates a
  waiting entry for C, add this entry to the waiting list, and waits for the
  semaphore in the entry to be up (initially down, which assumes that C is still
  running). When C exits, its exiting entry is added to exiting list, and then C
  checks if there is an entry waiting for it in waiting list. If yes, set up its
  semaphore so that P can know C is done. No matter P calls wait() before or after
  C exits, or P terminates without waiting before or after C exits, the resources
  are freed, since in my implementation, every process must free its own resources
  before it exits.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?


  We implemented access to user memory using the get_user() provided by Pintos manual,
  because of two reasons. First, this implementation is faster because it takes
  advantage of processor's MMU, and tends to be used in real kernels. Second, some
  helpful code was provided, which made the task simpler.




>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?


  Advantages:
    Our implementation is pretty straightforward. When openning a new file, our
    code simply just increment the file descriptor and allocate it to the newly
    opened file, create an entry containing information for this file open, and
    add it to the list of file descriptor entries. This implementation did not
    take us too much time. If we implement it in another way so that it can recycle
    the file descriptors for the closed files, we would have to manipulate heap
    memory, which slow both for human coding and machine running.


  Disadvantages:
    Everytime the program opens a file, the file descriptor increments. Even if
    the program closes the file, immediately after openning, the file descriptor
    will never restore to its old value. If the program keeps running without
    exiting, and opens a whole lot of files, integer overflow might occur.



>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

  We did not change it.



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

  We learned how one implementation of the OS function which detects invalid
  pointers from user programs.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

  Some direct hints in useful functions and data structure would be nice.
  Maybe we should not build this completely on our own. Instead, a frame or startup
  code would certainly clear the path for us.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

  We need more detailed instructions about the project. It is quite difficult to
  get started...

>> Any other comments?
