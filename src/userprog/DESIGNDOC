		     +--------------------------+
       	       	     |		CS 130		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Qiuming Sun     <sunqm@shanghaitech.edu.cn>
Yifeng  Zhang   <zhangyf@shanghaitech.edu.cn>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


  1. https://github.com/pindexis/pintos-project2
  2. https://wenku.baidu.com/view/8296f9629b6648d7c1c74649.html
  3. http://bits.usc.edu/cs350/assignments/project2.pdf
  4. https://wenku.baidu.com/view/8e0d72e0a8956bec0875e392.html
  5. https://wenku.baidu.com/view/eed6bbdaa48da0116c175f0e7cd184254b351ba8.html

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  None.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  struct thread
  {
    char *prog_name;                       /* The name of the running program for this thread */
    tid_t parent_tid;                      /* The tid of the parent thread */
    struct list desc_table;                /* List of the fds of files opened by this thread */
    int next_fd;                           /* File descriptor for the next file to be opened */
    struct file *executable;               /* File struct referring the the executable */
  };

  static struct list process_history_list; /* List that keeps track of all died process */

  struct process_exit_status               /* Stores the exit status of each process */
  {
    struct list_elem elem;                 /* List element */
    int status;                            /* The returned status */
    pid_t pid;                             /* Process id */
    pid_t parent_pid;                      /* Parent process id */
  };

  static struct list process_waiting_list; /* List that keeps track of all the waiting process */

  struct process_waiting                   /* Waiting process entry */
  {
    struct list_elem elem;                 /* List element */
    struct semaphore sem;                  /* The semaphore */
    pid_t waiting_for;                     /* The id for the process waiting for */
  };

  struct fd_entry                          /* File descriptor entry */
  {
    struct list_elem elem;                 /* List element */
    int fd;                                /* File decriptor number */
    struct file *file;                     /* File struct reffering the file */
  };


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

  Each file descriptor is an integer, indicating a single file opened by the current
  thread. The file  descriptor starts with 2 (i.e., the first file opened by the
  thread will have file descriptor = 2), because 0 and 1 are reserved for STDIN_FILENO
  and STDOUT_FILENO. Upon openning a new file, allocate a new file descriptor to
  this file, basing on the previous one stored in the thread struct. This file
  descriptor is then used to create a new struct fd_entry, and this fd_entry will
  be added to desc_table.

  With in a single process, file descriptors are unique, thus can be used to
  identify different opened files. Even if the file names are the same, this
  design will dinstinguish between them correctly.






---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

  This is done by using the process_exit and process_waiting entries. Parents wait
  for the child process to complete loading by trying to take down the semaphore
  in the process_waiting entry, and when the child finishes loading, it rises up
  the semaphore, signaling that the loading has finished to the parent process, and
  add its exit status entry to process_exit list. Then the parent process search
  for the status in process_exit list, and finally gets the status.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

  We maintain a list with all the waiting processes and all the processes that have
  exited. If P waits for C, the wait() function first search for the process C in
  the list containing all threads. If the correct C is found and it is a child
  of P, go on to the next step, else return -1. In the next step, P creates a
  waiting entry for C, add this entry to the waiting list, and waits for the
  semaphore in the entry to be up (initially down, which assumes that C is still
  running). When C exits, its exiting entry is added to exiting list, and then C
  checks if there is an entry waiting for it in waiting list. If yes, set up its
  semaphore so that P can know C is done. No matter P calls wait() before or after
  C exits, or P terminates without waiting before or after C exits, the resources
  are freed, since in my implementation, parents must free their children's resources
  before they exit.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?


  We implemented access to user memory using the get_user() provided by Pintos manual,
  because of two reasons. First, this implementation is faster because it takes
  advantage of processor's MMU, and tends to be used in real kernels. Second, some
  helpful code was provided, which made the task simpler.




>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?


  Advantages:
    Our implementation is pretty straightforward. When openning a new file, our
    code simply just increment the file descriptor and allocate it to the newly
    opened file, create an entry containing information for this file open, and
    add it to the list of file descriptor entries. This implementation did not
    take us too much time. If we implement it in another way so that it can recycle
    the file descriptors for the closed files, we would have to manipulate heap
    memory, which slow both for human coding and machine running.


  Disadvantages:
    Everytime the program opens a file, the file descriptor increments. Even if
    the program closes the file, immediately after openning, the file descriptor
    will never restore to its old value. If the program keeps running without
    exiting, and opens a whole lot of files, integer overflow might occur.



>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

  We did not change it.



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
